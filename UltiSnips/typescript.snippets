global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from "$2`!p snip.rv=lowerdash(t[1])`";
endsnippet

snippet impf "import File from './File'" b
import $1 from "${2:./}${3:$1}";
endsnippet

snippet impn "import { nested } from" b
import { $1 } from "$2";
endsnippet

snippet impa "import all from a package that converts from camelCase or PascalCase to kebab-cased" b
import * as $1 from "$2`!p snip.rv=lowerdash(t[1])`";
endsnippet

snippet impp "import file without a declaration" b
import "$1";
endsnippet

snippet rc "require package that converts from camelCase or PascalCase to kebab-cased" b
const $1 = require("$2`!p snip.rv=lowerdash(t[1])`");
endsnippet

snippet icn "import classnames as cn" b
import cn from "classnames";
endsnippet
snippet expf "export File from './File'" b
export $1 from "${2:./}$1";
endsnippet

snippet expn "export nested" b
export { $1 } from "$2";
endsnippet

snippet expa "export * from" b
export * from "$1";
endsnippet

snippet cl "console.log"
console.log($1);
endsnippet

snippet clv "console.log variable"
console.log("$1:", $1);
endsnippet

snippet desc "describe a test" b
describe("$1", () => {
	it("should $2", () => {
		$3
	});
});
endsnippet

snippet it "create a test block" b
it("should $1", () => {
	$2
});
endsnippet

snippet intf "create interface for file" b
export interface I${1:`!v expand('%:t:r')`}$2 {
}
endsnippet

# ==========================================
# React Snippets
#
snippet rce "react class exported (with prop and state interfaces)" b
import * as React from "react";

export interface I$1Props {
}

export interface I$1State {
}

export default class ${1:`!v expand('%:t:r')`} extends React.Component<I$1Props, I$1State> {
	constructor(props: I$1Props) {
		super(props);

		this.state = {};
	}

	public render() {
		return null;$0
	}
}
endsnippet

snippet sfc "stateless functional component (with prop interace)" b
import * as React from "react";

export interface I$1Props {
}

const ${1:`!v expand('%:t:r')`}: React.SFC<$2I$1Props> = props => {
	return null;$0
};

export default $1;
endsnippet

snippet rcf "react class function" b
$1 = (${2:event}) => {
	$3
};
endsnippet

snippet idp "interface default props and type with default props" b
export interface I${1:`!v expand('%:t:r')`}DefaultProps {
  $2
}

export type $1WithDefaultProps = I$1Props & I$1DefaultProps;
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet sdp "static default props" b
public static defaultProps: I${1:`!v expand('%:t:r')`}DefaultProps = {
	$2
};
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
} as I$1DefaultProps;
endsnippet

snippet spt "static prop types" b
public static propTypes = {
	${1:className}: ${2:PropTypes.string},$0
};
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
};
endsnippet

snippet gds "get derived state from props" b
public static getDerivedStateFromProps(nextProps: I${1:`!v expand('%:t:r')`}Props, prevState: I$1State) {
	return null;$0
};
endsnippet

snippet cdm "component did mount" b
public componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
public shouldComponentUpdate(nextProps: I${1:`!v expand('%:t:r')`}Props, nextState: I$1State) {
	return true;$0
}
endsnippet

snippet gsbu "get snapshot before update" b
public getSnapshotBeforeUpdate(prevProps: I${1:`!v expand('%:t:r')`}Props, prevState: I$1State) {
	return null;$0
}
endsnippet

snippet cdu "component did update" b
public componentDidUpdate(prevProps: I${1:`!v expand('%:t:r')`}Props, prevState: I$1State, ${2:snapshot: any}) {
	$0
}
endsnippet

snippet cdc "component did catch" b
public componentDidCatch(error: Error, info: React.ErroInfo) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
public componentWillUnmount() {
	$1
}
endsnippet

snippet r.me "React.MouseEvent<T>" w
React.MouseEvent<$1>
endsnippet

snippet r.te "React.TouchEvent<T>" w
React.TouchEvent<$1>
endsnippet

snippet r.ke "React.KeyboardEvent<T>" w
React.KeyboardEvent<$1>
endsnippet


# ==========================================
# Prop Types Section (only for legacy)
#

# Inline prop types
snippet pt.a "PropTypes.array" w
PropTypes.array
endsnippet

snippet pt.ar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet pt.b "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet pt.br "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet pt.f "PropTypes.func" w
PropTypes.func
endsnippet

snippet pt.fr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet pt.nu "PropTypes.number" w
PropTypes.number
endsnippet

snippet pt.nur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pt.o "PropTypes.object" w
PropTypes.object
endsnippet

snippet pt.or "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pt.s "PropTyes.string" w
PropTypes.string
endsnippet

snippet pt.sr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet pt.no "PropTypes.node" w
PropTypes.node
endsnippet

snippet pt.nor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pt.e "PropTypes.element" w
PropTypes.element
endsnippet

snippet pt.er "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet pt.ao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet pt.aor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.io "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet pt.ior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.oo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet pt.oor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.one "PropTypes.oneOf([])" w
PropTypes.oneOf(["$1"$2])
endsnippet

snippet pt.oner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(["$1"$2]).isRequired
endsnippet

snippet pt.onet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet pt.onetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet pt.sh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet pt.shr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet
