global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "Import a lib" b
import $1 from "$2`!p snip.rv=lowerdash(t[1])`";
endsnippet

snippet impf "Import a file" b
import $1 from "${2:./}${3:$1}";
endsnippet

snippet impn "Import nested" b
import { $1 } from "$2";
endsnippet

snippet impp "Import without from" b
import "$1";
endsnippet

snippet rc "Require const" b
const $1 = require("$2`!p snip.rv=lowerdash(t[1])`");
endsnippet

snippet icn "Import classnames" b
import cn from "classnames";
endsnippet

snippet cl "Console.log"
console.log($1);
endsnippet

snippet clv "Console log variable"
console.log("$1:", $1);
endsnippet

snippet exp "Export from location" b
export $1 from "${2:./}$1";
endsnippet

snippet expn "Export nested" b
export { $1 } from "${2:./}";
endsnippet

snippet expi "Export from a file import" b
import $1 from "${2:./}${3:$1}";
export ${4:default} $1;
endsnippet

snippet expix "Export from a jsx file import" b
import $1 from "${2:./}${3:$1}.jsx";
export ${4:default} $1;
endsnippet

snippet desc "Describe a test" b
describe("$1", () => {
	it("should $2", () => {
		$3
	});
});
endsnippet

snippet it "Create a test block" b
it("should $1", () => {
	$2
});
endsnippet

