global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "Import a lib" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet impf "Import a file" b
import $1 from '${2:./}${3:$1}';
endsnippet

snippet impn "Import nested" b
import { $1 } from '$2';
endsnippet

snippet impp "Import without from" b
import '$1';
endsnippet

snippet imps "Import pluralized" b
import $1 from '${2:.}/$1s';
endsnippet

snippet rc "Require const" b
const $1 = require('$2`!p snip.rv=lowerdash(t[1])`');
endsnippet


snippet icn "Import classnames" b
import cn from 'classnames';
endsnippet

snippet ise "Import shallowEqual" b
import shallowEqual from 'shallowequal';
endsnippet

snippet cl "Console.log"
console.log($1);
endsnippet

snippet clv "Console log variable"
console.log('$1:', $1);
endsnippet

snippet exp "Export from location" b
export $1 from '${2:./}$1';
endsnippet

snippet expn "Export nested" b
export { $1 } from '${2:./}';
endsnippet

snippet expi "Export from a file import" b
import $1 from '${2:./}${3:$1}';
export ${4:default} $1;
endsnippet

snippet expix "Export from a jsx file import" b
import $1 from '${2:./}${3:$1}.jsx';
export ${4:default} $1;
endsnippet

snippet desc "Describe a test" b
describe('$1', () => {
	it('should $2', () => {
		$3
	});
});
endsnippet

snippet it "Create a test block" b
it('should $1', () => {
	$2
});
endsnippet

# ==========================================
# React Snippets
#
snippet rce "React class exported" b
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

export default class ${1:`!v expand('%:t:r')`} extends PureComponent {
	static propTypes = {
		className: PropTypes.string,
		children: PropTypes.node,
	};

	${2:constructor(props) {
		super(props);

		this.state = {};
	}}

	render() {
		return (
			${3:<div />}
		);
	}
}
endsnippet

snippet rpe "React pure export" b
import React from 'react';
import PropTypes from 'prop-types';


const ${1:`!v expand('%:t:r')`} = (${2:props}) => {
	return (
		<div${3}>
		</div>
	);
};

$1.propTypes = {
	${4}
};

export default $1;
endsnippet

snippet rcf "React class function" b
$1 = (${2:e}) => {
	$3
};
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet dp "get default props" b
static defaultProps = {
	$1
};
endsnippet


snippet pt "React prop types definition" b
static propTypes = {
	${1:className}: ${2:PropTypes.string},${0}
};
endsnippet


snippet cwm "component will mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	return $1;
}
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	$3
}
endsnippet

snippet cdu "component did update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet gds "Get Derived State from Props" b
static getDerivedStateFromProps(nextProps, prevState) {
	$1
	return null;
};
endsnippet


# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pt.a "React PropTypes array" w
PropTypes.array,
endsnippet

snippet pt.ar "React PropTypes array required" w
PropTypes.array.isRequired,
endsnippet

snippet pt.b "React PropTypes boolean" w
PropTypes.bool,
endsnippet

snippet pt.br "React PropTypes boolean required" w
PropTypes.bool.isRequired,
endsnippet

snippet pt.f "React PropTypes function" w
PropTypes.func,
endsnippet

snippet pt.fr "React PropTypes function required" w
PropTypes.func.isRequired,
endsnippet

snippet pt.nu "React PropTypes number" w
PropTypes.number,
endsnippet

snippet pt.nur "React PropTypes number required" w
PropTypes.number.isRequired,
endsnippet

snippet pt.o "React PropTypes object" w
PropTypes.object,
endsnippet

snippet pt.or "React PropTypes object required" w
PropTypes.object.isRequired,
endsnippet

snippet pt.s "React PropType string" w
PropTypes.string,
endsnippet

snippet pt.sr "React PropType string required" w
PropTypes.string.isRequired,
endsnippet

snippet pt.no "React PropTypes node" w
PropTypes.node,
endsnippet

snippet pt.nor "React PropTypes node required" w
PropTypes.node.isRequired,
endsnippet

snippet pt.e "React PropTypes element" w
PropTypes.element,
endsnippet

snippet pt.er "React PropTypes element required" w
PropTypes.element.isRequired,
endsnippet

snippet pt.ao "React PropTypes arrayOf" w
PropTypes.arrayOf(${1:PropTypes.string}),
endsnippet

snippet pt.aor "React PropTypes arrayOf required" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.io "React PropTypes instanceOf" w
PropTypes.instanceOf(${1:PropTypes.string}),
endsnippet

snippet pt.ior "React PropTypes instanceOf required" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.oo "React PropTypes objectOf" w
PropTypes.objectOf(${1:PropTypes.string}),
endsnippet

snippet pt.oor "React PropTypes objectOf required" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.one "React PropTypes oneOf" w
PropTypes.oneOf(['$1'$2]),
endsnippet

snippet pt.oner "React PropTypes oneOf required" w
PropTypes.oneOf(['$1'$2]).isRequired,
endsnippet

snippet pt.onet "React PropTypes onOfType" w
PropTypes.oneOfType([
	$1
]),
endsnippet

snippet pt.onetr "React PropTypes onOfType required" w
PropTypes.oneOfType([
	$1
]).isRequired,
endsnippet

snippet pt.sh "React PropTyes shape" w
PropTypes.shape({
	$1
}),
endsnippet

snippet pt.shr "React PropTypes shape required" w
PropTypes.shape({
	$1
}).isRequired,
endsnippet
